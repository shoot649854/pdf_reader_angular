import os

import vertexai
from google.auth.transport.requests import AuthorizedSession
from google.oauth2 import service_account
from src import ABS_CREDENTIAL_PATH
from src.logging.Logging import logger
from vertexai.preview.generative_models import GenerativeModel

# Set up your project details
PROJECT_ID = os.getenv("PROJECT_ID")
LOCATION = os.getenv("REGION")
RESOURCE_ID = "gemini-pro"


def disable_safety_settings(project_id, location, resource_id, credentials):
    """Disables safety settings for the specified Gemini resource."""
    try:
        authed_session = AuthorizedSession(credentials)
        url = f"https://gemini.googleapis.com/v1/projects/{project_id}/locations/{location}/resources/{resource_id}/safetySettings"

        get_response = authed_session.get(url)
        if get_response.status_code != 200:
            logger.error(f"Failed to retrieve safety settings: {get_response.text}")
            return None

        safety_settings = get_response.json()
        safety_settings["enabled"] = False

        headers = {
            "Content-Type": "application/json",
        }
        params = {
            "updateMask": "enabled",
        }

        patch_response = authed_session.patch(url, json=safety_settings, headers=headers, params=params)

        if patch_response.status_code == 200:
            logger.info("Safety settings have been disabled successfully.")
            return patch_response.json()
        else:
            logger.error(f"Failed to update safety settings: {patch_response.text}")
            return None

    except Exception as e:
        logger.error(f"An error occurred while disabling safety settings: {e}")
        return None


class GenerateResponse:
    def __init__(self):
        try:
            self.chat = self._initiate_chat_session()
            credentials = service_account.Credentials.from_service_account_file(ABS_CREDENTIAL_PATH)
            disable_success = disable_safety_settings(PROJECT_ID, LOCATION, RESOURCE_ID, credentials)
            if not disable_success:
                logger.warning("Proceeding without disabling safety settings.")

            vertexai.init(project=PROJECT_ID, location=LOCATION, credentials=credentials)
            logger.info("Chat session successfully initiated.")
        except Exception as e:
            logger.error(f"Failed to initiate chat session: {e}")
            raise

    def generate_response(self, text, max_output_tokens=2**11):
        """Call the Gemini model to generate a description."""
        try:
            response = self._multiturn_generate_content(text, max_output_tokens)
            if response:
                generated_text = response.candidates[0].content.parts[0].text
                logger.debug(f"Response: {generated_text}")
                return generated_text
            else:
                logger.warning("No response generated by the model.")
                return None
        except Exception as e:
            logger.error(f"Error in generating response: {e}")
            return None

    def _initiate_chat_session(self):
        """Initialize the chat sessionã€‚"""
        try:
            model = GenerativeModel(RESOURCE_ID)
            chat = model.start_chat()
            return chat
        except Exception as e:
            logger.error(f"Failed to initiate chat session: {e}")
            raise

    def _multiturn_generate_content(self, user_input, max_output_tokens: int):
        """Generate responses from the model based on user input."""
        try:
            config = {
                "max_output_tokens": max_output_tokens,
                "temperature": 0.9,
                "top_p": 1,
            }

            response = self.chat.send_message(user_input, generation_config=config)
            return response
        except Exception as e:
            logger.error(f"Error generating response: {e}")
            return None
